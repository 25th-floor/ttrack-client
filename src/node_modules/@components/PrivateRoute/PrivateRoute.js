// @flow

import React from 'react';
import { connect } from 'react-redux';
import { is } from 'ramda';
import { Redirect } from 'react-router';
import {
    withRouter,
    Route,
} from 'react-router-dom';

type TPrivateRouteProps = {
    path: string,
    validation: Function,
    history: any,
    isAuthenticated: boolean,
    children: any,
};

export const PrivateRoute = (props: TPrivateRouteProps) => {
    const {
        children, path, validation = () => true, history, isAuthenticated,
    } = props;
    // on /auth do nothing
    if (history.location.pathname === '/auth') return null;
    if (!isAuthenticated) return (<Redirect push to="/auth" />);
    const valid = validation(props, path);
    if (is(String, valid)) {
        history.push(valid);
        return null;
    }

    return (
        <Route path={path} {...props}>
            {children}
        </Route>
    );
};

const mapStateToProps = ({ auth }, { history }) => ({
    isAuthenticated: auth.isAuthenticated,
    user: auth.user,
    history,
});

export default withRouter(connect(mapStateToProps)(PrivateRoute));
