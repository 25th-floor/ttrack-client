// @flow

import React, { Component } from 'react';
import { connect } from 'react-redux';

import './LoadingApplication.css';

type TLoadingApplicationProps = {
    loading: boolean,
    children: any,
};

type TLoadingApplicationState = {
    showLoading: boolean,
    initiateFade: boolean,
};

/**
 * LoadingApplication
 */
export class LoadingApplication extends Component<TLoadingApplicationProps, TLoadingApplicationState> {
    constructor(props: TLoadingApplicationProps) {
        super(props);
        this.state = {
            showLoading: props.loading,
            initiateFade: false,
        };
    }
    componentWillReceiveProps(nextProps: TLoadingApplicationProps) {
        const { loading } = this.props;
        if (nextProps.loading === false && nextProps.loading !== loading) {
            setTimeout(() => { this.setState({ showLoading: false }); }, 2500);
            setTimeout(() => { this.setState({ initiateFade: true }); }, 500);
        }
    }
    render() {
        const { loading, children } = this.props;
        const { showLoading, initiateFade } = this.state;
        const fadeClass = initiateFade && showLoading ? 'loading-fade' : '';

        const containerClass = showLoading ? 'transparent' : '';
        return (
            <div>
                {showLoading && (
                    <div className={`wrap ${fadeClass}`}>
                        <div className="loading">
                            <div className="bounceball" />
                            <div className="text">NOW LOADING</div>
                        </div>
                    </div>
                )}
                {!loading && (
                    <div className={`${fadeClass} ${containerClass}`}>{children}</div>
                )}
            </div>
        );
    }
}

const mapStateToProps = ({ auth }) => ({
    loading: !auth.initialization,
});

export default connect(mapStateToProps)(LoadingApplication);
