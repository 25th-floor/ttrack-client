// @flow

import React, { Component } from 'react';

import { RotatingLogo } from '@animations';
import { Version } from '@components';

import './LoadingApplication.css';

const styles = {
    container: {
        display: 'flex',
        flexDirection: 'column',
        // width: '100%',
        height: '100%',
        position: 'fixed',
        zIndex: '10000',
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
    },
    topContainer: {
        backgroundColor: '#434a54',
        borderBottom: '2px solid rgb(46, 51, 58)',
        flex: 1,
        position: 'relative',
        transition: 'top 1s ease-in-out',
    },
    bottomContainer: {
        backgroundColor: '#434a54',
        borderTop: '2px solid rgb(46, 51, 58)',
        flex: 1,
        position: 'relative',
        transition: 'bottom 1s ease-in-out',
    },
    logoContainer: {
        background: 'rgb(46, 51, 58)',
        position: 'absolute',
        bottom: '-26px',
        left: '50%',
        padding: '10px 20px',
        borderRadius: '15px',
        marginLeft: '-100px',
        border: '1px solid rgb(37, 41, 47)',
        zIndex: 1,
        width: '200px',
    },
    versionContainer: {
        color: '#a5a4a7',
        textAlign: 'center',
        marginTop: '50px',
        fontWeight: '100',
    },
};

type TLoadingApplicationProps = {
    open?: boolean,
};

type TLoadingApplicationState = {
    loadingState: 'loading' | 'startAnimation' | 'animationEnded',
};

/**
 * LoadingApplication
 */
export class LoadingApplication extends Component<TLoadingApplicationProps, TLoadingApplicationState> {
    state = { loadingState: 'loading' };

    componentWillReceiveProps(nextProps: TLoadingApplicationProps) {
        if (nextProps.open) {
            setTimeout(() => {
                this.setState({ loadingState: 'startAnimation' });
            }, 2000);
            setTimeout(() => {
                this.setState({ loadingState: 'animationEnded' });
            }, 3500);
        }
    }

    render() {
        const { loadingState } = this.state;
        if (loadingState === 'animationEnded') return null;

        const startAnimation = loadingState === 'startAnimation';
        const topContainer = {
            ...styles.topContainer,
            top: startAnimation ? '-100%' : '0',
        };
        const bottomContainer = {
            ...styles.bottomContainer,
            bottom: startAnimation ? '-100%' : '0',
        };
        return (
            <div style={styles.container}>
                <div style={topContainer}>
                    <div style={styles.logoContainer}>
                        <RotatingLogo />
                    </div>
                </div>
                <div style={bottomContainer}>
                    <div style={styles.versionContainer}>version: <Version /></div>
                </div>
            </div>
        );
    }
}

export default LoadingApplication;
