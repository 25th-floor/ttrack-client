import { REHYDRATE } from 'redux-persist/constants';
import { Utils } from './';

import actionTypes from './AuthActionTypes';

export const LocalStorage = {
    getItem(key, defaultValue) {
        if (!localStorage) return defaultValue;
        const dataStr = localStorage.getItem(key);
        if (dataStr) {
            return JSON.parse(dataStr);
        }
        return defaultValue;
    },
    setItem(key, value) {
        localStorage.setItem(key, JSON.stringify(value));
    },
};

const initialState = {
    user: LocalStorage.getItem('reduxPersist:user', {}),
    isAuthenticated: LocalStorage.getItem('reduxPersist:isAuthenticated', false),
};

const AuthReducer = (state = initialState, action) => {
    switch (action.type) {
        case REHYDRATE: {
            // debugger;
            const incoming = action.payload.myReducer;
            if (incoming) return { ...state, ...incoming };
            return state;
        }

        case actionTypes.LOGIN: {
            const { user } = action;
            return {
                ...state,
                user,
                isAuthenticated: true,
            };
        }

        case actionTypes.LOGOUT: {
            return {
                ...state,
                user: {},
                isAuthenticated: false,
            };
        }

        default:
            return state;
    }
};

export {
    AuthReducer,
};

export default AuthReducer;
