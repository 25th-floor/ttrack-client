// @flow

import { pathOr } from 'ramda';
import actionTypes from './AuthTypes';

import type { AuthAction, AuthState } from './AuthTypes';

const initialState: AuthState = {
    user: {},
    isAuthenticated: false,
    initialization: false,
};

const AuthReducer = (state: AuthState = initialState, action: AuthAction) => {
    switch (action.type) {
        case actionTypes.LOGIN: {
            const { user } = action;
            return {
                ...state,
                user,
                isAuthenticated: true,
            };
        }

        case actionTypes.LOGOUT: {
            return {
                ...state,
                user: {},
                isAuthenticated: false,
            };
        }

        case actionTypes.REHYDRATE: {
            const { auth } = action.payload;
            const user = pathOr(state.user, ['user'], auth);
            const isAuthenticated = pathOr(state.isAuthenticated, ['isAuthenticated'], auth);
            return {
                ...state,
                initialization: true,
                user,
                isAuthenticated,
            };
        }

        default:
            return state;
    }
};

export {
    AuthReducer,
};

export default AuthReducer;
