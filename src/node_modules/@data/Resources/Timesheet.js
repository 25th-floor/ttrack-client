// @flow
/* eslint-disable function-paren-newline */

import R from 'ramda';
import moment from 'moment';
import { store } from '@data';
import { notify } from 'reapop';
import type { ApiUserType } from './ResourcesTypes';
import { config } from '../Constants';

const { client } = config;

const postPeriods = (usr_id: number, payload: any) => client.post(`users/${usr_id}/periods/`, payload);

const updatePeriods = (usr_id: number, per_id: string, payload: any) => client.put(`users/${usr_id}/periods/${per_id}`, payload);

const deletePeriods = (usr_id: number, per_id: string) => client.delete(`users/${usr_id}/periods/${per_id}`);

const fixDurations = (period) => {
    const durations = ['per_start', 'per_stop', 'per_duration', 'per_break'];
    return R.mapObjIndexed(
        (val, key) => (R.contains(key, durations) && val !== null ? moment.duration(val) : val),
    )(period);
};

export const Timesheet = {
    getTypes: async (): Promise<Array<any>> => client.get('period-types'),
    // TODO naming ...
    getTimesheetFromUser: (user: ApiUserType, from: string, to: string) => client.get(`users/${user.usr_id}/timesheet/${from}/${to}`),
    saveDay: async (usr_id: number, date: moment, periods: Array<any>, removed: Array<any>) => {
        const createOrUpdatePromises = R.map((period) => {
            const payload = fixDurations({
                ...period,
                date: date.format('YYYY-MM-DD'),
                usr_id,
                per_pty_id: period.type.pty_id,
            });

            if (payload.per_id) return updatePeriods(usr_id, payload.per_id, payload);
            return postPeriods(usr_id, payload);
        })(periods);

        const removePeriodsPromises = R.map(per_id => deletePeriods(usr_id, per_id))(removed);

        return Promise.all([
            ...createOrUpdatePromises,
            ...removePeriodsPromises,
        ]).then(
            (response) => {
                store.dispatch(notify({ message: 'Saved', status: 'success' }));
                return response;
            },
        );
    },
};
