import R from 'ramda';
import { config, utils as Utils } from '../Constants';

const { client } = config;

const postPeriods = R.curry(
    (usr_id, payload) => client.post(`users/${usr_id}/periods/`, payload),
);

const updatePeriods = R.curry(
    (usr_id, per_id, payload) => client.put(`users/${usr_id}/periods/${per_id}`, payload),
);

const deletePeriods = R.curry(
    (usr_id, per_id) => client.delete(`users/${usr_id}/periods/${per_id}`),
);

export const Timesheet = {
    getTypes: () => client.get('period-types'),
    // TODO naming ...
    getTimesheetFromUser: (user, from, to) => client.get(`users/${user.usr_id}/timesheet/${from}/${to}`),
    saveDay: async (usr_id, date, periods, removed) => {
        const postPeriodsCurried = postPeriods(usr_id);
        const updatePeriodsCurried = updatePeriods(usr_id);
        const deletePeriodsCurried = deletePeriods(usr_id);

        const createOrUpdatePromises = R.map(
            (period) => {
                const payload = Utils.fixDurations({
                    ...period,
                    date: date.format('YYYY-MM-DD'),
                    usr_id,
                    per_pty_id: period.type.pty_id,
                });

                if (payload.per_id) return updatePeriodsCurried(payload.per_id, payload);
                return postPeriodsCurried(payload);
            },
        )(periods);

        const removePeriodsPromises = R.map(deletePeriodsCurried)(removed);

        return Promise.all([
            ...createOrUpdatePromises,
            ...removePeriodsPromises,
        ]);
    },
};
