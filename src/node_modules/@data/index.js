// @flow

import { createStore, applyMiddleware, combineReducers } from 'redux';
// $FlowFixMe
import { persistStore } from 'redux-persist';
import { logger } from 'redux-logger';

import thunk from 'redux-thunk';
import { reducer as notificationsReducer } from 'reapop';

import Auth, { AuthReducer, type AuthState } from './Auth';
import Motto, { MottoReducer, type MottoState } from './Motto';

import { Users, Timesheet, Vacations } from './Resources';
import { config, utils } from './Constants';

let middleware = applyMiddleware(thunk);
if (process.env.NODE_ENV === 'development') {
    middleware = applyMiddleware(logger, thunk);
}

export type AppState = {
    auth: AuthState,
    motto: MottoState,
};

export const store = createStore(
    combineReducers({
        auth: AuthReducer,
        motto: MottoReducer,
        // reducer must be mounted as `notifications` !
        notifications: notificationsReducer(),
    }),
    middleware,
);

persistStore(store);
export const Actions = {
    Auth,
    Motto,
};


export type TResources = {
    Users: any,
    Timesheet: any,
    Vacations: any,
}
export const Resources = {
    Users,
    Timesheet,
    Vacations,
};

export const Constants = {
    config,
};

export const Utils = utils;
