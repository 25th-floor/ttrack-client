// @flow
import { createStore, applyMiddleware, combineReducers } from 'redux';
import { persistStore } from 'redux-persist';
import { logger } from 'redux-logger';

import Auth, { AuthReducer, type AuthState } from './Auth';
import Motto, { MottoReducer, type MottoState } from './Motto';

import { Users, Timesheet, Vacations } from './Resources';
import { config, utils } from './Constants';

let middleware = applyMiddleware(logger);

if (process.env.NODE_ENV === 'development') {
    middleware = applyMiddleware(logger);
} else {
    // exclude logger from prod and tests
    middleware = applyMiddleware();
}

export type AppState = {
    auth: AuthState,
    motto: MottoState,
};

export const store = createStore(
    combineReducers({
        auth: AuthReducer,
        motto: MottoReducer,
    }),
    middleware,
    // autoRehydrate(),
);

persistStore(store);
export const Actions = {
    Auth,
    Motto,
};

export const Resources = {
    Users,
    Timesheet,
    Vacations,
};

export const Constants = {
    config,
};

export const Utils = utils;
