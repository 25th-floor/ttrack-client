// @flow
/* eslint-disable no-console, no-return-await */

import { store } from '@data';
import { notify } from 'reapop';

export const HOST = global.HOST || 'http://localhost:8000/';
export const API_URI = global.API_URL || `${HOST}api/`;

let APP_VERSION = false;
if (process && process.env && process.env.REACT_APP_VERSION) {
    APP_VERSION = process.env.REACT_APP_VERSION;
}

let APP_GIT = false;
if (process && process.env && process.env.REACT_APP_GIT && process.env.REACT_APP_GIT !== 'null') {
    APP_GIT = process.env.REACT_APP_GIT;
}

if (!process) {
    // dont log in tests
    console.info('APP_VERSION', APP_VERSION);
    console.info('APP_GIT', APP_GIT);
    console.info('HOST', HOST);
    console.info('API_URI', API_URI);
}

export const DEFAULT_FETCH_CONFIG = {
    headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
    },
    mode: 'cors',
    cache: 'default',
};

export const GET = {
    method: 'GET',
    ...DEFAULT_FETCH_CONFIG,
};

export const POST = {
    method: 'POST',
    ...DEFAULT_FETCH_CONFIG,
};

export const PUT = {
    method: 'PUT',
    ...DEFAULT_FETCH_CONFIG,
};

export const DELETE = {
    method: 'DELETE',
    ...DEFAULT_FETCH_CONFIG,
};

function toJson(res: any) {
    if (res.ok) {
        return res.json();
    }
    try {
        return res.json()
            .then((err) => {
                store.dispatch(notify({
                    title: err.error,
                    message: err.message,
                    status: 'error',
                }));
                throw res;
            });
    } catch (error) {
        store.dispatch(notify({ message: res.statusText, status: 'error' }));
        throw res;
    }
}

function toError(err) {
    store.dispatch(notify({ message: 'Error not responding', status: 'error' }));
    throw err;
}

export const client = {
    get: async (uri: string) => await fetch(`${API_URI}${uri}`, GET).then(toJson).catch(toError),
    post: async (uri: string, body: any) => await fetch(`${API_URI}${uri}`, { ...POST, body: JSON.stringify(body) }).then(toJson).catch(toError),
    put: async (uri: string, body: any) => await fetch(`${API_URI}${uri}`, { ...PUT, body: JSON.stringify(body) }).then(toJson).catch(toError),
    delete: async (uri: string) => await fetch(`${API_URI}${uri}`, DELETE).catch(toError),
};

export default {
    API_URI, APP_VERSION, APP_GIT, client,
};
